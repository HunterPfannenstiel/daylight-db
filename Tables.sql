-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
BEGIN;
DROP TABLE IF EXISTS store."order";
DROP TABLE IF EXISTS store.location;
DROP TABLE IF EXISTS store.customer_order_info;
DROP TABLE IF EXISTS store.pickup_time;
DROP TABLE IF EXISTS store.payment_processor;
DROP TABLE IF EXISTS store.cart_extra;
DROP TABLE IF EXISTS store.cart_item;
DROP TABLE IF EXISTS store.cart;
DROP TABLE IF EXISTS store.weekday_availability;
DROP TABLE IF EXISTS store.weekday;
DROP TABLE IF EXISTS store.menu_item_category;
DROP TABLE IF EXISTS store.menu_item_subcategory;
DROP TABLE IF EXISTS store.item_subcategory;
DROP TABLE IF EXISTS store.item_category;
DROP TABLE IF EXISTS store.item_extra_group;
DROP TABLE IF EXISTS store.extra_group_extra;
DROP TABLE IF EXISTS store.extra_group;
DROP TABLE IF EXISTS store.extra;
DROP TABLE IF EXISTS store.extra_category;
DROP TABLE IF EXISTS store.item_range_availability;
DROP TABLE IF EXISTS store.range_availability;
DROP FUNCTION IF EXISTS store.fetch_grouping_items;
DROP FUNCTION IF EXISTS store.fetch_menu_items;
DROP VIEW IF EXISTS store.vw_menu_item_details;
DROP TYPE IF EXISTS store.menu_items;
DROP TABLE IF EXISTS store.menu_item;
DROP TABLE IF EXISTS store."grouping";
DROP TABLE IF EXISTS store.account_user_info;
DROP TABLE IF EXISTS store.account;
DROP TABLE IF EXISTS store.user_info;


CREATE TABLE IF NOT EXISTS store."order"
(
    order_id serial NOT NULL,
    cart_id integer NOT NULL,
    customer_order_info_id integer NOT NULL,
    location_id smallint NOT NULL,
    pickup_time_id smallint NOT NULL,
    pickup_date date NOT NULL,
    payment_processor_id smallint NOT NULL,
    is_printed boolean NOT NULL DEFAULT false,
    is_verified boolean NOT NULL DEFAULT false,
    is_error boolean NOT NULL DEFAULT false,
    subtotal numeric(6, 2),
    tax numeric(5, 2),
    total_price numeric(6, 2),
    payment_uid text,
    created_on timestamp(0) NOT NULL DEFAULT NOW(),
    account_id integer,
    user_info_id integer,
    PRIMARY KEY (order_id)
);

CREATE TABLE IF NOT EXISTS store.location
(
    location_id smallserial NOT NULL,
    city text NOT NULL,
    state text NOT NULL,
    zip numeric NOT NULL,
    address text NOT NULL,
    common_name text,
    phone_number text,
    PRIMARY KEY (location_id)
);

CREATE TABLE IF NOT EXISTS store.cart
(
    cart_id serial NOT NULL,
    last_modified time without time zone NOT NULL,
    is_locked boolean NOT NULL DEFAULT false,
    PRIMARY KEY (cart_id)
);

CREATE TABLE IF NOT EXISTS store.cart_item
(
    cart_id integer NOT NULL,
    cart_item_id integer NOT NULL,
    menu_item_id integer NOT NULL,
    amount integer NOT NULL,
    subtotal numeric(5, 2),
    PRIMARY KEY (cart_id, cart_item_id),
    UNIQUE (cart_id, cart_item_id)
);

CREATE TABLE IF NOT EXISTS store.cart_extra
(
    cart_item_id integer NOT NULL,
    cart_id integer NOT NULL,
    extra_id integer NOT NULL,
    PRIMARY KEY (cart_item_id, cart_id, extra_id)
);

CREATE TABLE IF NOT EXISTS store."grouping"
(
    grouping_id smallserial NOT NULL,
    price numeric(4, 2) NOT NULL,
    name text NOT NULL,
    size smallint NOT NULL,
    image text NOT NULL,
    PRIMARY KEY (grouping_id),
	UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS store.menu_item
(
    menu_item_id smallserial NOT NULL,
    name text NOT NULL,
    price numeric(4, 2) NOT NULL,
    image text NOT NULL,
    description text NOT NULL,
    grouping_id smallint,
    is_active boolean NOT NULL DEFAULT true,
    PRIMARY KEY (menu_item_id),
    UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS store.weekday_availability
(
    menu_item_id smallserial NOT NULL,
    weekday_id smallint NOT NULL,
    PRIMARY KEY (menu_item_id, weekday_id)
);

CREATE TABLE IF NOT EXISTS store.item_category
(
    item_category_id smallserial NOT NULL,
    name text NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    PRIMARY KEY (item_category_id),
    UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS store.item_subcategory
(
    item_subcategory_id smallserial NOT NULL,
    item_category_id smallint NOT NULL,
    name text NOT NULL,
    is_active boolean NOT NULL DEFAULT true,
    PRIMARY KEY (item_subcategory_id),
    UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS store.extra_category
(
    extra_category_id serial NOT NULL,
    name text NOT NULL,
    PRIMARY KEY (extra_category_id),
    UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS store.extra
(
    extra_id smallserial NOT NULL,
    name text NOT NULL,
    price numeric(4, 2),
    extra_category_id smallint,
    PRIMARY KEY (extra_id),
    UNIQUE (name, extra_category_id, price)
);

CREATE TABLE IF NOT EXISTS store.menu_item_category
(
    item_category_id smallint NOT NULL,
    menu_item_id smallint NOT NULL,
    PRIMARY KEY (item_category_id, menu_item_id)
);

CREATE TABLE IF NOT EXISTS store.menu_item_subcategory
(
    menu_item_id smallint NOT NULL,
    item_subcategory_id smallint NOT NULL,
    PRIMARY KEY (menu_item_id, item_subcategory_id)
);

CREATE TABLE IF NOT EXISTS store.extra_group
(
    extra_group_id smallserial NOT NULL,
    extra_category_id smallint NOT NULL,
    name text NOT NULL,
    PRIMARY KEY (extra_group_id),
    UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS store.extra_group_extra
(
    extra_id smallint NOT NULL,
    extra_group_id smallint NOT NULL,
    PRIMARY KEY (extra_id, extra_group_id)
);

CREATE TABLE IF NOT EXISTS store.item_extra_group
(
    extra_group_id smallint NOT NULL,
    menu_item_id smallint NOT NULL,
    PRIMARY KEY (extra_group_id, menu_item_id)
);

CREATE TABLE IF NOT EXISTS store.customer_order_info
(
    customer_order_info_id serial NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    email text NOT NULL,
    phone_number text NOT NULL,
    PRIMARY KEY (customer_order_info_id)
);

CREATE TABLE IF NOT EXISTS store.range_availability
(
    range_availability_id smallserial NOT NULL,
    range_availability daterange NOT NULL,
    PRIMARY KEY (range_availability_id)
);

CREATE TABLE IF NOT EXISTS store.weekday
(
    weekday_id smallint NOT NULL,
    weekday character varying(9) NOT NULL,
    PRIMARY KEY (weekday_id),
    UNIQUE (weekday)
);

CREATE TABLE IF NOT EXISTS store.item_range_availability
(
    range_availability_id smallint NOT NULL,
    menu_item_id smallint NOT NULL,
    PRIMARY KEY (range_availability_id, menu_item_id)
);

CREATE TABLE IF NOT EXISTS store.account
(
    account_id serial NOT NULL,
    email text NOT NULL,
    PRIMARY KEY (account_id),
    UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS store.user_info
(
    user_info_id serial NOT NULL,
    first_name text NOT NULL,
    last_name text NOT NULL,
    phone_number text NOT NULL,
    PRIMARY KEY (user_info_id)
);

CREATE TABLE IF NOT EXISTS store.account_user_info
(
    user_info_id integer NOT NULL,
    account_id integer NOT NULL,
    PRIMARY KEY (user_info_id, account_id)
);

CREATE TABLE IF NOT EXISTS store.pickup_time
(
    pickup_time_id smallserial NOT NULL,
    pickup_time time(0) without time zone NOT NULL,
    PRIMARY KEY (pickup_time_id)
);

CREATE TABLE IF NOT EXISTS store.payment_processor
(
    payment_processor_id smallserial NOT NULL,
    payment_processor text NOT NULL,
    PRIMARY KEY (payment_processor_id)
);

ALTER TABLE IF EXISTS store."order"
    ADD FOREIGN KEY (cart_id)
    REFERENCES store.cart (cart_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store."order"
    ADD FOREIGN KEY (location_id)
    REFERENCES store.location (location_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store."order"
    ADD FOREIGN KEY (customer_order_info_id)
    REFERENCES store.customer_order_info (customer_order_info_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store."order"
    ADD FOREIGN KEY (account_id)
    REFERENCES store.account (account_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store."order"
    ADD FOREIGN KEY (user_info_id)
    REFERENCES store.user_info (user_info_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store."order"
    ADD FOREIGN KEY (payment_processor_id)
    REFERENCES store.payment_processor (payment_processor_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store."order"
    ADD FOREIGN KEY (pickup_time_id)
    REFERENCES store.pickup_time (pickup_time_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

ALTER TABLE IF EXISTS store."order"
	ADD CONSTRAINT customer_info_or_user_info 
	CHECK(customer_order_info_id IS NOT NULL OR (user_info_id IS NOT NULL AND account_id IS NOT NULL));

ALTER TABLE IF EXISTS store.cart_item
    ADD FOREIGN KEY (cart_id)
    REFERENCES store.cart (cart_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.cart_item
    ADD FOREIGN KEY (menu_item_id)
    REFERENCES store.menu_item (menu_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.cart_extra
    ADD FOREIGN KEY (cart_item_id, cart_id)
    REFERENCES store.cart_item (cart_item_id, cart_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS store.menu_item
    ADD FOREIGN KEY (grouping_id)
    REFERENCES store."grouping" (grouping_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.weekday_availability
    ADD FOREIGN KEY (menu_item_id)
    REFERENCES store.menu_item (menu_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.weekday_availability
    ADD FOREIGN KEY (weekday_id)
    REFERENCES store.weekday (weekday_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.item_subcategory
    ADD FOREIGN KEY (item_category_id)
    REFERENCES store.item_category (item_category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.extra
    ADD FOREIGN KEY (extra_category_id)
    REFERENCES store.extra_category (extra_category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.menu_item_category
    ADD FOREIGN KEY (item_category_id)
    REFERENCES store.item_category (item_category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.menu_item_category
    ADD FOREIGN KEY (menu_item_id)
    REFERENCES store.menu_item (menu_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.menu_item_subcategory
    ADD FOREIGN KEY (menu_item_id)
    REFERENCES store.menu_item (menu_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.menu_item_subcategory
    ADD FOREIGN KEY (item_subcategory_id)
    REFERENCES store.item_subcategory (item_subcategory_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.extra_group
    ADD FOREIGN KEY (extra_category_id)
    REFERENCES store.extra_category (extra_category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.extra_group_extra
    ADD FOREIGN KEY (extra_id)
    REFERENCES store.extra (extra_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.extra_group_extra
    ADD FOREIGN KEY (extra_group_id)
    REFERENCES store.extra_group (extra_group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.item_extra_group
    ADD FOREIGN KEY (extra_group_id)
    REFERENCES store.extra_group (extra_group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.item_extra_group
    ADD FOREIGN KEY (menu_item_id)
    REFERENCES store.menu_item (menu_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.item_range_availability
    ADD FOREIGN KEY (range_availability_id)
    REFERENCES store.range_availability (range_availability_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.item_range_availability
    ADD FOREIGN KEY (menu_item_id)
    REFERENCES store.menu_item (menu_item_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.account_user_info
    ADD FOREIGN KEY (user_info_id)
    REFERENCES store.user_info (user_info_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS store.account_user_info
    ADD FOREIGN KEY (account_id)
    REFERENCES store.account (account_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

CREATE VIEW store.vw_menu_item_details AS 
	SELECT MI.name, MI.image, MI.price, MI.menu_item_id, MI.is_active
	FROM Store.menu_item MI
	WHERE MI.is_active = true;
	
CREATE TYPE store.menu_items AS (
	name TEXT,
	image TEXT,
	price numeric(4, 2)
);

CREATE OR REPLACE FUNCTION store.fetch_menu_items(category TEXT DEFAULT NULL, subcategory TEXT DEFAULT NULL)
RETURNS SETOF store.menu_items
LANGUAGE plpgsql AS
$func$
BEGIN
	IF (category IS NULL) THEN
		RETURN QUERY
		SELECT MD.name, MD.image, MD.price FROM store.vw_menu_item_details MD;
	ELSIF (subcategory IS NULL) THEN
		RETURN QUERY
		SELECT MD.name, MD.image, MD.price
		FROM store.vw_menu_item_details MD
		JOIN store.item_category IC ON IC.name = category
		JOIN store.menu_item_category MIC ON MIC.menu_item_id = MD.menu_item_id 
			AND MIC.item_category_id = IC.item_category_id;
	ELSE 
		RETURN QUERY
		SELECT MD.name, MD.image, MD.price
		FROM store.vw_menu_item_details MD
		JOIN store.item_category IC ON IC.name = category
		JOIN store.item_subcategory ISC ON ISC.name = subcategory
		JOIN store.menu_item_category MIC ON MIC.menu_item_id = MD.menu_item_id AND MIC.item_category_id = IC.item_category_id
		JOIN store.menu_item_subcategory MISC ON MISC.menu_item_id = MIC.menu_item_id AND MISC.item_subcategory_id = ISC.item_subcategory_id;
	END IF;
END;
$func$;

CREATE OR REPLACE FUNCTION store.fetch_grouping_items(grouping_name TEXT)
RETURNS SETOF store.menu_items
LANGUAGE plpgsql AS
$func$
BEGIN
	RETURN QUERY
	SELECT MI.name, MI.image, MI.price
	FROM store.menu_item MI
	JOIN store.grouping G ON G.grouping_id = MI.grouping_id
	WHERE G.name = grouping_name AND MI.is_active = true;
END;
$func$;

END;
